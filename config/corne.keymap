/* spellchecker:disable */
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 800  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20   // 10

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT

#define PSCR PRINTSCREEN

&lt {
    flavor = "hold-preferred";
    // tapping-term-ms = <100>;
};

&mt {
    // tapping-term-ms = <100>;
};

/ {
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };

    macros {
        // Windows sleep key
        win_sleep: win_sleep {
            wait-ms = <50>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "WIN_SLEEP";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
        };
    };

    behaviors {
        lclk_rclk: lclk_rclk {
            compatible = "zmk,behavior-tap-dance";
            label = "LCLK_RCLK";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>, <&mkp RCLK>;
        };

        mmv {
            acceleration-exponent = <0>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0      
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        label = "RGB_ENCODER";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";
        layer0 {
            display-name = "QWERTY";
            bindings = <
&kp TAB        &kp Q  &kp W       &kp E     &kp R        &kp T        &kp UP     &kp Y        &kp U      &kp I      &kp O    &kp P     &kp BSPC
&mt LCTRL ESC  &kp A  &kp S       &kp D     &kp F        &kp G        &kp DOWN   &kp H        &kp J      &kp K      &kp L    &kp SEMI  &kp ENTER
&kp LSHFT      &kp Z  &kp X       &kp C     &kp V        &kp B        &kp LEFT   &kp N        &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
&kp C_MUTE                        &kp LALT  &lt 1 SPACE  &lt 2 ENTER  &kp RIGHT  &lt 3 UNDER  &kp SPACE  &kp RALT                      &kp LGUI >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
        layer1 {
            display-name = "NUMBER"; 
            bindings = <
&kp LA(F4)      &kp N1    &kp N2     &kp N3     &kp N4     &kp N5   &msc SCRL_UP     &kp N6  &kp N7     &kp N8  &kp N9   &kp N0   &win_sleep
&mt LCTRL BSPC  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT  &kp DEL  &msc SCRL_DOWN   &kp F7  &kp F8     &kp F9  &kp F10  &kp F11  &kp F12 
&mt LSHFT CAPS  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &kp INS  &msc SCRL_LEFT   &kp F1  &kp F2     &kp F3  &kp F4   &kp F5   &mt RSHFT F6
&trans                                &trans     &trans     &trans   &msc SCRL_RIGHT  &trans  &kp MINUS  &trans                    &trans >;
            sensor-bindings = <&scroll_encoder>;
        };
        layer2 {
            display-name = "SYMBOL"; 
            bindings = <        
&kp TILDE        &kp EXCL   &kp AT    &kp POUND  &kp DLLR   &kp PRCNT  &mmv MOVE_UP     &kp CARET   &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR   &kp BSLH 
&mt LCTRL PSCR   &kp GRAVE  &kp LBRC  &kp LBKT   &kp LPAR   &kp PLUS   &mmv MOVE_DOWN   &kp DQT     &kp RPAR  &kp RBKT   &kp RBRC  &kp COLON  &kp SQT
&kp LSHFT        &kp LC(Z)  &kp LC(X) &kp LC(C)  &kp LC(V)  &kp MINUS  &mmv MOVE_LEFT   &lclk_rclk  &kp PIPE  &kp LT     &kp GT    &kp QMARK  &mt RSHFT K_APP
&trans                                &trans     &trans     &trans     &mmv MOVE_RIGHT  &trans      &kp PLUS  &trans                          &trans >;
            sensor-bindings = <&scroll_encoder>;
        };
        layer3 {
            display-name = "CONFIG"; 
            bindings = <
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &rgb_ug RGB_SAI  &kp FSLH   &kp N7  &kp N8  &kp N9  &kp MINUS  &none
&out OUT_TOG     &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_SAD  &kp ASTRK  &kp N4  &kp N5  &kp N6  &kp PLUS   &kp ENTER
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT    &none
&bootloader                                        &kp LT           &kp EQUAL        &kp GT           &rgb_ug RGB_HUI  &trans     &trans  &kp N0                     &bootloader>;
            sensor-bindings = <&rgb_encoder>;
        };
    };  
};
